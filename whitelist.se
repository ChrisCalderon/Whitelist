# transferable whitelists
# meant to be used to check callers/
# ensure only an approved caller invokes a function.

# The whitelist count is kept a storage index 0
# Whitelists have IDs which are natural numbers, starting with 1.
# At the ID's position in storage, the owner address is stored.
# At the owner's address, the ID of their default whitelist is stored.
# Each addition to a whitelist stores the address at
#      sha3(whitelistID | address)
# functions for changing a whitelist are only allowed if the owner executes it.
# Add, remove, and replace are functions provided for changes.
# Owners can change the owner address.
# Each function has an associated event.

macro HARDFAIL(): ~jump(0x100000000)

event WhitelistCreated(creator:indexed, ID:indexed)
def newWhitelist():
    with sender = msg.sender:
        with count = sload(0) + 1:
            sstore(0, count)
            sstore(count, sender)
            sstore(sender, count)
            log(type=WhitelistCreated, sender, count)
            
event OwnerChanged(old:indexed, new:indexed, ID:indexed)
def changeOwner(whitelistID:uint256, newOwner:address):
    with sender = msg.sender:
        with owner = sload(whitelistID):
            if sender != owner:
                HARDFAIL()
            sstore(whitelistID, newOwner)
            log(type=OwnerChanged, sender, newOwner, whitelistID)
            
event DefaultChanged(owner:indexed, newDefault:indexed)
def changeDefault(newDefaultID:uint256):
    with sender = msg.sender:
        with owner = sload(newDefaultID):
            if sender != owner:
                HARDFAIL()
            sstore(sender, newDefaultID)
            log(type=DefaultChanged, sender, newDefaultID)
